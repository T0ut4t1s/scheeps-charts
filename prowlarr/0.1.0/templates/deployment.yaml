apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "prowlarr.fullname" . }}
  namespace: {{ .Values.namespaceOverride | default .Release.Namespace }}
  labels:
    {{- include "prowlarr.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.main.count }}
  selector:
    matchLabels:
      {{- include "prowlarr.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "prowlarr.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: config-setup
        image: busybox:1.35
        command: ["/bin/sh"]
        args:
        - -c
        - |
          #!/bin/sh
          set -e
          
          # Copy base config from ConfigMap
          cp /tmp/base-config/config.xml /config/config.xml
          
          # Read credentials from secret
          USERNAME=$(cat /tmp/db-secret/{{ .Values.existingSecrets.database.username }})
          PASSWORD=$(cat /tmp/db-secret/{{ .Values.existingSecrets.database.password }})
          
          # Inject credentials into config.xml using sed
          sed -i "s|<!-- PostgresUser and PostgresPassword will be injected by init container -->|<PostgresUser>$USERNAME</PostgresUser><PostgresPassword>$PASSWORD</PostgresPassword>|" /config/config.xml
          
          echo "Config file prepared successfully"
        volumeMounts:
        - name: base-config
          mountPath: /tmp/base-config
        - name: config
          mountPath: /config
        - name: db-secret
          mountPath: /tmp/db-secret
          readOnly: true
      - name: fix-perms
        image: busybox:1.36
        command: ["sh", "-c", "chown -R 1000:1000 /config && chmod -R u+rwX,g+rwX /config"]
        volumeMounts:
        - name: config
          mountPath: /config
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 9696
              protocol: TCP
          env:
            {{- range $key, $value := .Values.config }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              {{- toYaml .Values.livenessProbe.httpGet | nindent 14 }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              {{- toYaml .Values.readinessProbe.httpGet | nindent 14 }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /config
            {{- if .Values.main.persistence.media.enabled }}
            - name: media
              mountPath: {{ .Values.main.persistence.media.mountPath }}
            {{- end }}
      volumes:
        - name: base-config
          configMap:
            name: {{ include "prowlarr.fullname" . }}-config
        - name: config
          persistentVolumeClaim:
            {{- if .Values.main.persistence.config.existingPvc }}
            claimName: {{ .Values.main.persistence.config.existingPvc }}
            {{- else }}
            claimName: {{ include "prowlarr.fullname" . }}-config-pvc
            {{- end }}
        - name: db-secret
          secret:
            secretName: {{ .Values.existingSecrets.database.name }}
        {{- if .Values.main.persistence.media.enabled }}
        - name: media
          persistentVolumeClaim:
            claimName: {{ .Values.main.persistence.media.existingPvc }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}