apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pgbouncer.fullname" . }}
  labels:
    {{- include "pgbouncer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "pgbouncer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "pgbouncer.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      - name: auth-processor
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/bash"]
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          
          # Create processed userlist directory
          mkdir -p /tmp/pgbouncer
          
          # Generate userlist and database mappings from multiple connection secrets
          > /tmp/pgbouncer/userlist.txt
          > /tmp/pgbouncer/databases.ini
          
          {{- $connections := list -}}
          {{- if .Values.auth.connections -}}
            {{- $connections = .Values.auth.connections -}}
          {{- else -}}
            {{- $connections = (include "pgbouncer.connectionsFromQuestions" . | fromYaml) -}}
          {{- end -}}
          
          echo "[databases]" > /tmp/pgbouncer/databases.ini
          
          {{- range $connection := $connections }}
          echo "Processing connection: {{ $connection.name }}"
          USERNAME=$(cat /opt/bitnami/pgbouncer/secrets/{{ $connection.name }}/{{ $connection.userSecret.usernameKey }} | tr -d '\n')
          PASSWORD=$(cat /opt/bitnami/pgbouncer/secrets/{{ $connection.name }}/{{ $connection.userSecret.passwordKey }} | tr -d '\n')
          DATABASE=$(cat /opt/bitnami/pgbouncer/secrets/{{ $connection.name }}/{{ $connection.userSecret.databaseKey }} | tr -d '\n')
          
          # Use plain text passwords to allow PgBouncer to handle SCRAM authentication to backend
          echo "\"$USERNAME\" \"$PASSWORD\"" >> /tmp/pgbouncer/userlist.txt
          
          # Add database routing: database_name = host=backend port=5432 dbname=actual_db
          echo "$DATABASE = host={{ $.Values.postgresql.host }} port={{ $.Values.postgresql.port }} dbname=$DATABASE" >> /tmp/pgbouncer/databases.ini
          
          echo "Database mapping: $USERNAME -> $DATABASE"
          {{- end }}
          
          echo "Generated userlist:"
          cat /tmp/pgbouncer/userlist.txt
          echo ""
          echo "Generated databases.ini:"
          cat /tmp/pgbouncer/databases.ini
        volumeMounts:
        - name: processed-auth
          mountPath: /tmp/pgbouncer
        {{- $connections := list -}}
        {{- if .Values.auth.connections -}}
          {{- $connections = .Values.auth.connections -}}
        {{- else -}}
          {{- $connections = (include "pgbouncer.connectionsFromQuestions" . | fromYaml) -}}
        {{- end -}}
        {{- range $connection := $connections }}
        - name: {{ $connection.name }}-secret
          mountPath: /opt/bitnami/pgbouncer/secrets/{{ $connection.name }}
          readOnly: true
        {{- end }}
      containers:
      - name: pgbouncer
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRESQL_HOST
          value: {{ .Values.postgresql.host | quote }}
        - name: POSTGRESQL_PORT
          value: "{{ .Values.postgresql.port }}"
        - name: POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.connectionSecret.name }}
              key: {{ .Values.postgresql.connectionSecret.usernameKey }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.connectionSecret.name }}
              key: {{ .Values.postgresql.connectionSecret.passwordKey }}
        - name: PGBOUNCER_AUTH_TYPE
          value: {{ .Values.auth.type | quote }}
        - name: PGBOUNCER_POOL_MODE
          value: {{ .Values.auth.poolMode | quote }}
        - name: PGBOUNCER_PORT
          value: "5432"
        - name: PGBOUNCER_USERLIST_FILE
          value: "/opt/bitnami/pgbouncer/processed-auth/userlist.txt"
        - name: PGBOUNCER_DATABASES_FILE
          value: "/opt/bitnami/pgbouncer/processed-auth/databases.ini"
        - name: PGBOUNCER_SERVER_TLS_SSLMODE
          value: {{ .Values.tls.sslMode | quote }}
        - name: PGBOUNCER_SERVER_TLS_CA_FILE
          value: "/opt/bitnami/pgbouncer/certs/ca.crt"
        - name: PGBOUNCER_SERVER_TLS_CERT_FILE
          value: "/opt/bitnami/pgbouncer/certs/tls.crt"
        - name: PGBOUNCER_SERVER_TLS_KEY_FILE
          value: "/opt/bitnami/pgbouncer/certs/tls.key"
        - name: PGBOUNCER_MIN_POOL_SIZE
          value: "{{ .Values.auth.minPoolSize }}"
        - name: PGBOUNCER_IGNORE_STARTUP_PARAMETERS
          value: {{ .Values.auth.ignoreStartupParameters | quote }}
        {{/* Database configuration for each connection */}}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: pgbouncer-server-tls
          mountPath: /opt/bitnami/pgbouncer/certs
          readOnly: true
        - name: processed-auth
          mountPath: /opt/bitnami/pgbouncer/processed-auth
          readOnly: true
      volumes:
      - name: pgbouncer-server-tls
        secret:
          secretName: {{ .Values.tls.serverTlsSecret }}
      - name: processed-auth
        emptyDir: {}
      {{- $connections := list -}}
      {{- if .Values.auth.connections -}}
        {{- $connections = .Values.auth.connections -}}
      {{- else -}}
        {{- $connections = (include "pgbouncer.connectionsFromQuestions" . | fromYaml) -}}
      {{- end -}}
      {{- range $connection := $connections }}
      - name: {{ $connection.name }}-secret
        secret:
          secretName: {{ $connection.userSecret.name }}
      {{- end }}