apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pgbouncer.fullname" . }}
  labels:
    {{- include "pgbouncer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "pgbouncer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "pgbouncer.selectorLabels" . | nindent 8 }}
    spec:
      initContainers:
      - name: auth-processor
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/bash"]
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          
          # Create processed userlist directory
          mkdir -p /tmp/pgbouncer
          
          # Generate userlist and database mappings from multiple connection secrets
          > /tmp/pgbouncer/userlist.txt
          > /tmp/pgbouncer/databases.ini
          
          {{- $connections := list -}}
          {{- if .Values.auth.connections -}}
            {{- $connections = .Values.auth.connections -}}
          {{- else -}}
            {{- if .Values.auth.connection1Enabled | default false -}}
              {{- $conn1 := dict "name" (.Values.auth.connection1Name | default "connection1") "userSecret" (dict "name" (.Values.auth.connection1SecretName | default "service1-pg-secret") "usernameKey" (.Values.auth.connection1UsernameKey | default "username") "passwordKey" (.Values.auth.connection1PasswordKey | default "password") "databaseKey" (.Values.auth.connection1DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn1 -}}
            {{- end -}}
            {{- if .Values.auth.connection2Enabled | default false -}}
              {{- $conn2 := dict "name" (.Values.auth.connection2Name | default "connection2") "userSecret" (dict "name" (.Values.auth.connection2SecretName | default "service2-pg-secret") "usernameKey" (.Values.auth.connection2UsernameKey | default "username") "passwordKey" (.Values.auth.connection2PasswordKey | default "password") "databaseKey" (.Values.auth.connection2DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn2 -}}
            {{- end -}}
            {{- if .Values.auth.connection3Enabled | default false -}}
              {{- $conn3 := dict "name" (.Values.auth.connection3Name | default "connection3") "userSecret" (dict "name" (.Values.auth.connection3SecretName | default "service3-pg-secret") "usernameKey" (.Values.auth.connection3UsernameKey | default "username") "passwordKey" (.Values.auth.connection3PasswordKey | default "password") "databaseKey" (.Values.auth.connection3DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn3 -}}
            {{- end -}}
            {{- if .Values.auth.connection4Enabled | default false -}}
              {{- $conn4 := dict "name" (.Values.auth.connection4Name | default "connection4") "userSecret" (dict "name" (.Values.auth.connection4SecretName | default "service4-pg-secret") "usernameKey" (.Values.auth.connection4UsernameKey | default "username") "passwordKey" (.Values.auth.connection4PasswordKey | default "password") "databaseKey" (.Values.auth.connection4DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn4 -}}
            {{- end -}}
            {{- if .Values.auth.connection5Enabled | default false -}}
              {{- $conn5 := dict "name" (.Values.auth.connection5Name | default "connection5") "userSecret" (dict "name" (.Values.auth.connection5SecretName | default "service5-pg-secret") "usernameKey" (.Values.auth.connection5UsernameKey | default "username") "passwordKey" (.Values.auth.connection5PasswordKey | default "password") "databaseKey" (.Values.auth.connection5DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn5 -}}
            {{- end -}}
            {{- if .Values.auth.connection6Enabled | default false -}}
              {{- $conn6 := dict "name" (.Values.auth.connection6Name | default "connection6") "userSecret" (dict "name" (.Values.auth.connection6SecretName | default "service6-pg-secret") "usernameKey" (.Values.auth.connection6UsernameKey | default "username") "passwordKey" (.Values.auth.connection6PasswordKey | default "password") "databaseKey" (.Values.auth.connection6DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn6 -}}
            {{- end -}}
            {{- if .Values.auth.connection7Enabled | default false -}}
              {{- $conn7 := dict "name" (.Values.auth.connection7Name | default "connection7") "userSecret" (dict "name" (.Values.auth.connection7SecretName | default "service7-pg-secret") "usernameKey" (.Values.auth.connection7UsernameKey | default "username") "passwordKey" (.Values.auth.connection7PasswordKey | default "password") "databaseKey" (.Values.auth.connection7DatabaseKey | default "database")) -}}
              {{- $connections = append $connections $conn7 -}}
            {{- end -}}
          {{- end }}
          
          echo "[databases]" > /tmp/pgbouncer/databases.ini
          
          {{- range $connection := $connections }}
          echo "Processing connection: {{ $connection.name }}"
          USERNAME=$(cat /opt/bitnami/pgbouncer/secrets/{{ $connection.userSecret.name }}/{{ $connection.userSecret.usernameKey }} | tr -d '\n')
          PASSWORD=$(cat /opt/bitnami/pgbouncer/secrets/{{ $connection.userSecret.name }}/{{ $connection.userSecret.passwordKey }} | tr -d '\n')
          DATABASE=$(cat /opt/bitnami/pgbouncer/secrets/{{ $connection.userSecret.name }}/{{ $connection.userSecret.databaseKey }} | tr -d '\n')
          
          # Use plain text passwords to allow PgBouncer to handle SCRAM authentication to backend
          # Escape any quotes or backslashes in credentials to keep userlist syntax valid
          ESCAPED_USERNAME=$(printf '%s' "$USERNAME" | sed 's/\\/\\\\/g; s/\"/\\\"/g')
          ESCAPED_PASSWORD=$(printf '%s' "$PASSWORD" | sed 's/\\/\\\\/g; s/\"/\\\"/g')
          echo "\"$ESCAPED_USERNAME\" \"$ESCAPED_PASSWORD\"" >> /tmp/pgbouncer/userlist.txt
          
          # Add database routing: database_name = host=backend port=5432 dbname=actual_db
          echo "$DATABASE = host={{ $.Values.postgresql.host }} port={{ $.Values.postgresql.port }} dbname=$DATABASE" >> /tmp/pgbouncer/databases.ini
          
          echo "Database mapping: $USERNAME -> $DATABASE"
          {{- end }}
          
          echo "Generated userlist:"
          cat /tmp/pgbouncer/userlist.txt
          echo ""
          echo "Generated databases.ini:"
          cat /tmp/pgbouncer/databases.ini
          
          # Create the main PgBouncer configuration file with our database mappings
          # First copy our databases section
          cp /tmp/pgbouncer/databases.ini /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          
          # Append the pgbouncer configuration section
          echo "" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "[pgbouncer]" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "listen_port=5432" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "listen_addr=0.0.0.0" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "unix_socket_dir=/tmp/" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "unix_socket_mode=0777" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "auth_file=/opt/bitnami/pgbouncer/conf/userlist.txt" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "auth_type={{ $.Values.auth.type }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "pidfile=/opt/bitnami/pgbouncer/tmp/pgbouncer.pid" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "admin_users=postgres" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "client_tls_sslmode=disable" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_tls_sslmode={{ $.Values.tls.sslMode }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_tls_ca_file=/opt/bitnami/pgbouncer/certs/ca.crt" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_tls_cert_file=/opt/bitnami/pgbouncer/certs/tls.crt" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_tls_key_file=/opt/bitnami/pgbouncer/certs/tls.key" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "pool_mode={{ $.Values.pool.mode }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "min_pool_size={{ $.Values.pool.minPoolSize }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "default_pool_size={{ $.Values.pool.defaultPoolSize }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "reserve_pool_size={{ $.Values.pool.reservePoolSize }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "reserve_pool_timeout={{ $.Values.pool.reservePoolTimeout }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "max_client_conn={{ $.Values.pool.maxClientConn }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_idle_timeout={{ $.Values.pool.serverIdleTimeout }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_lifetime={{ $.Values.pool.serverLifetime }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "ignore_startup_parameters={{ $.Values.auth.ignoreStartupParameters }}" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "stats_period=60" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_round_robin=0" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_fast_close=0" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_tls_ciphers=fast" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "server_tls_protocols=secure" >> /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          
          # Copy our processed userlist to the config directory
          cp /tmp/pgbouncer/userlist.txt /opt/bitnami/pgbouncer/conf/userlist.txt
          echo "Created complete PgBouncer configuration with database mappings"
        volumeMounts:
        - name: processed-auth
          mountPath: /tmp/pgbouncer
        - name: pgbouncer-config
          mountPath: /opt/bitnami/pgbouncer/conf
        {{- $connections := list -}}
        {{- if .Values.auth.connections -}}
          {{- $connections = .Values.auth.connections -}}
        {{- else -}}
          {{- if .Values.auth.connection1Enabled | default false -}}
            {{- $conn1 := dict "name" (.Values.auth.connection1Name | default "connection1") "userSecret" (dict "name" (.Values.auth.connection1SecretName | default "service1-pg-secret")) -}}
            {{- $connections = append $connections $conn1 -}}
          {{- end -}}
          {{- if .Values.auth.connection2Enabled | default false -}}
            {{- $conn2 := dict "name" (.Values.auth.connection2Name | default "connection2") "userSecret" (dict "name" (.Values.auth.connection2SecretName | default "service2-pg-secret")) -}}
            {{- $connections = append $connections $conn2 -}}
          {{- end -}}
          {{- if .Values.auth.connection3Enabled | default false -}}
            {{- $conn3 := dict "name" (.Values.auth.connection3Name | default "connection3") "userSecret" (dict "name" (.Values.auth.connection3SecretName | default "service3-pg-secret")) -}}
            {{- $connections = append $connections $conn3 -}}
          {{- end -}}
          {{- if .Values.auth.connection4Enabled | default false -}}
            {{- $conn4 := dict "name" (.Values.auth.connection4Name | default "connection4") "userSecret" (dict "name" (.Values.auth.connection4SecretName | default "service4-pg-secret")) -}}
            {{- $connections = append $connections $conn4 -}}
          {{- end -}}
          {{- if .Values.auth.connection5Enabled | default false -}}
            {{- $conn5 := dict "name" (.Values.auth.connection5Name | default "connection5") "userSecret" (dict "name" (.Values.auth.connection5SecretName | default "service5-pg-secret")) -}}
            {{- $connections = append $connections $conn5 -}}
          {{- end -}}
          {{- if .Values.auth.connection6Enabled | default false -}}
            {{- $conn6 := dict "name" (.Values.auth.connection6Name | default "connection6") "userSecret" (dict "name" (.Values.auth.connection6SecretName | default "service6-pg-secret")) -}}
            {{- $connections = append $connections $conn6 -}}
          {{- end -}}
          {{- if .Values.auth.connection7Enabled | default false -}}
            {{- $conn7 := dict "name" (.Values.auth.connection7Name | default "connection7") "userSecret" (dict "name" (.Values.auth.connection7SecretName | default "service7-pg-secret")) -}}
            {{- $connections = append $connections $conn7 -}}
          {{- end -}}
        {{- end -}}
        {{- $uniqueSecrets := dict }}
        {{- range $connection := $connections }}
          {{- $_ := set $uniqueSecrets $connection.userSecret.name $connection.userSecret.name }}
        {{- end }}
        {{- range $secretName := $uniqueSecrets }}
        - name: {{ $secretName }}-secret
          mountPath: /opt/bitnami/pgbouncer/secrets/{{ $secretName }}
          readOnly: true
        {{- end }}
      containers:
      - name: pgbouncer
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/bash"]
        args:
        - -c
        - |
          #!/bin/bash
          set -e
          
          # Wait for config files to be created by init container
          while [ ! -f /opt/bitnami/pgbouncer/conf/pgbouncer.ini ]; do
            echo "Waiting for config file..."
            sleep 1
          done
          
          echo "Starting pgbouncer with custom config..."
          cat /opt/bitnami/pgbouncer/conf/pgbouncer.ini
          echo "---"
          cat /opt/bitnami/pgbouncer/conf/userlist.txt
          echo "---"
          
          # Start pgbouncer directly
          exec /opt/bitnami/pgbouncer/bin/pgbouncer -v /opt/bitnami/pgbouncer/conf/pgbouncer.ini
        ports:
        - containerPort: 5432
        {{/* Database configuration for each connection */}}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: pgbouncer-server-tls
          mountPath: /opt/bitnami/pgbouncer/certs
          readOnly: true
        - name: processed-auth
          mountPath: /opt/bitnami/pgbouncer/processed-auth
          readOnly: true
        - name: pgbouncer-config
          mountPath: /opt/bitnami/pgbouncer/conf
      volumes:
      - name: pgbouncer-server-tls
        secret:
          secretName: {{ .Values.tls.serverTlsSecret }}
      - name: processed-auth
        emptyDir: {}
      - name: pgbouncer-config
        emptyDir: {}
      {{- $connections := list -}}
      {{- if .Values.auth.connections -}}
        {{- $connections = .Values.auth.connections -}}
      {{- else -}}
        {{- if .Values.auth.connection1Enabled | default false -}}
          {{- $conn1 := dict "name" (.Values.auth.connection1Name | default "connection1") "userSecret" (dict "name" (.Values.auth.connection1SecretName | default "service1-pg-secret")) -}}
          {{- $connections = append $connections $conn1 -}}
        {{- end -}}
        {{- if .Values.auth.connection2Enabled | default false -}}
          {{- $conn2 := dict "name" (.Values.auth.connection2Name | default "connection2") "userSecret" (dict "name" (.Values.auth.connection2SecretName | default "service2-pg-secret")) -}}
          {{- $connections = append $connections $conn2 -}}
        {{- end -}}
        {{- if .Values.auth.connection3Enabled | default false -}}
          {{- $conn3 := dict "name" (.Values.auth.connection3Name | default "connection3") "userSecret" (dict "name" (.Values.auth.connection3SecretName | default "service3-pg-secret")) -}}
          {{- $connections = append $connections $conn3 -}}
        {{- end -}}
        {{- if .Values.auth.connection4Enabled | default false -}}
          {{- $conn4 := dict "name" (.Values.auth.connection4Name | default "connection4") "userSecret" (dict "name" (.Values.auth.connection4SecretName | default "service4-pg-secret")) -}}
          {{- $connections = append $connections $conn4 -}}
        {{- end -}}
        {{- if .Values.auth.connection5Enabled | default false -}}
          {{- $conn5 := dict "name" (.Values.auth.connection5Name | default "connection5") "userSecret" (dict "name" (.Values.auth.connection5SecretName | default "service5-pg-secret")) -}}
          {{- $connections = append $connections $conn5 -}}
        {{- end -}}
        {{- if .Values.auth.connection6Enabled | default false -}}
          {{- $conn6 := dict "name" (.Values.auth.connection6Name | default "connection6") "userSecret" (dict "name" (.Values.auth.connection6SecretName | default "service6-pg-secret")) -}}
          {{- $connections = append $connections $conn6 -}}
        {{- end -}}
        {{- if .Values.auth.connection7Enabled | default false -}}
          {{- $conn7 := dict "name" (.Values.auth.connection7Name | default "connection7") "userSecret" (dict "name" (.Values.auth.connection7SecretName | default "service7-pg-secret")) -}}
          {{- $connections = append $connections $conn7 -}}
        {{- end -}}
      {{- end -}}
      {{- $uniqueSecrets := dict }}
      {{- range $connection := $connections }}
        {{- $_ := set $uniqueSecrets $connection.userSecret.name $connection.userSecret.name }}
      {{- end }}
      {{- range $secretName := $uniqueSecrets }}
      - name: {{ $secretName }}-secret
        secret:
          secretName: {{ $secretName }}
      {{- end }}
