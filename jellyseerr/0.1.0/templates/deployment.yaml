apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jellyseerr.fullname" . }}
  namespace: {{ .Values.namespaceOverride | default .Release.Namespace }}
  labels:
    {{- include "jellyseerr.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.main.count }}
  selector:
    matchLabels:
      {{- include "jellyseerr.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "jellyseerr.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5055
              protocol: TCP
          env:
            {{- range $key, $value := .Values.config }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            # Database configuration
            - name: DATABASE_TYPE
              value: postgres
            - name: DATABASE_HOST
              value: {{ .Values.db.host | quote }}
            - name: DATABASE_PORT
              value: {{ .Values.db.port | quote }}
            - name: DATABASE_DB
              value: {{ .Values.db.name | quote }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.database.name }}
                  key: {{ .Values.existingSecrets.database.username }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.existingSecrets.database.name }}
                  key: {{ .Values.existingSecrets.database.password }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe.httpGet | nindent 12 }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe.httpGet | nindent 12 }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /app/config
      volumes:
        - name: config
          persistentVolumeClaim:
            {{- if .Values.main.persistence.config.existingPvc }}
            claimName: {{ .Values.main.persistence.config.existingPvc }}
            {{- else }}
            claimName: {{ include "jellyseerr.fullname" . }}-config-pvc
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}