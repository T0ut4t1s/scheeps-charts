apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "opencloud.fullname" . }}-config
  labels:
    {{- include "opencloud.labels" . | nindent 4 }}
data:
  OCIS_URL: "https://{{ .Values.opencloud.domain }}"
  OCIS_LOG_LEVEL: {{ .Values.opencloud.logLevel | quote }}
  OCIS_LOG_COLOR: {{ .Values.opencloud.logColor | quote }}
  OCIS_LOG_PRETTY: {{ .Values.opencloud.logPretty | quote }}
  OCIS_INSECURE: {{ .Values.opencloud.insecure | quote }}

  OCIS_BASE_DATA_PATH: "{{ .Values.storage.data.mountPath }}"
  OCIS_CACHE_STORE: "memory"
  OCIS_CACHE_STORE_NODES: "127.0.0.1:9233"

  {{- if .Values.database.external.enabled }}
  STORAGE_USERS_DRIVER: "sql"
  STORAGE_USERS_SQL_DSN: "postgres://{{ .Values.database.external.username }}:$(DB_PASSWORD)@{{ .Values.database.external.host }}:{{ .Values.database.external.port }}/{{ .Values.database.external.database }}?sslmode={{ .Values.database.external.sslmode }}"
  STORAGE_GROUPS_DRIVER: "sql"
  STORAGE_GROUPS_SQL_DSN: "postgres://{{ .Values.database.external.username }}:$(DB_PASSWORD)@{{ .Values.database.external.host }}:{{ .Values.database.external.port }}/{{ .Values.database.external.database }}?sslmode={{ .Values.database.external.sslmode }}"
  {{- end }}

  PROXY_HTTP_ADDR: "0.0.0.0:9200"
  PROXY_TLS: "false"
  GATEWAY_GRPC_ADDR: "0.0.0.0:9142"

  {{- if .Values.opencloud.enableBasicAuth }}
  PROXY_ENABLE_BASIC_AUTH: "true"
  {{- end }}
  {{- if .Values.opencloud.createDemoUsers }}
  IDM_CREATE_DEMO_USERS: "true"
  {{- end }}
  OCIS_EVENTS_ENABLE_TLS: "false"
  OCIS_GRPC_PROTOCOL: "tcp"

---
# templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "opencloud.fullname" . }}
  labels:
    {{- include "opencloud.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "opencloud.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "opencloud.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: ocis-init
          # Use a lightweight Alpine image to ensure openssl is available
          image: alpine:3.18
          command:
            - /bin/sh
            - -c
          args:
            - |
              # Install openssl at runtime
              apk add --no-cache openssl >/dev/null 2>&1
              echo "Generating OCIS secrets..."
              
              # Generate JWT secret if not provided
              if [ -z "$OCIS_JWT_SECRET" ]; then
                openssl rand -base64 32 > /tmp/secrets/jwt_secret
              else
                echo "$OCIS_JWT_SECRET" > /tmp/secrets/jwt_secret
              fi
              
              # Generate transfer secret
              openssl rand -base64 32 > /tmp/secrets/transfer_secret
              
              # Generate machine auth API key
              openssl rand -base64 32 > /tmp/secrets/api_key
              
              echo "Secret generation completed."
          env:
            - name: OCIS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.jwtSecretKey }}
                  optional: true
            - name: OCIS_TRANSFER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.transferSecretKey }}
                  optional: true
            - name: OCIS_MACHINE_AUTH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.apiKeyKey }}
                  optional: true
          volumeMounts:
            - name: secret-files
              mountPath: /tmp/secrets
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          env:
            - name: OCIS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.jwtSecretKey }}
                  optional: true
            - name: OCIS_TRANSFER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.transferSecretKey }}
                  optional: true
            - name: OCIS_MACHINE_AUTH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.apiKeyKey }}
                  optional: true
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.passwordSecret.name }}
                  key: {{ .Values.database.external.passwordSecret.key }}
            - name: IDM_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.adminPasswordSecret.name }}
                  key: {{ .Values.opencloud.adminPasswordSecret.key }}
          envFrom:
            - configMapRef:
                name: {{ include "opencloud.fullname" . }}-config
          volumeMounts:
            {{- if .Values.storage.data.enabled }}
            - name: data
              mountPath: {{ .Values.storage.data.mountPath }}
            {{- end }}
            {{- if .Values.storage.cache.enabled }}
            - name: cache
              mountPath: {{ .Values.storage.cache.mountPath }}
            {{- end }}
            - name: secret-files
              mountPath: /tmp/secrets
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{- if .Values.storage.data.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.storage.data.claimName }}
        {{- end }}
        {{- if .Values.storage.cache.enabled }}
        - name: cache
          persistentVolumeClaim:
            claimName: {{ .Values.storage.cache.claimName }}
        {{- end }}
        - name: secret-files
          emptyDir: {}