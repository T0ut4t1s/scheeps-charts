apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "opencloud.fullname" . }}
  labels:
    {{- include "opencloud.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "opencloud.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "opencloud.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      
      # Generate secure secrets in init container if not provided
      initContainers:
        - name: ocis-init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: 
            - /bin/sh
            - -c
            - |
              echo "Generating OCIS secrets if needed..."
              
              # Generate JWT secret if not provided
              if [ -z "$OCIS_JWT_SECRET" ]; then
                JWT_SECRET=$(openssl rand -base64 32)
                echo "Generated JWT secret: $JWT_SECRET"
                echo "$JWT_SECRET" > /tmp/secrets/jwt_secret
              else
                echo "Using provided JWT secret"
                echo "$OCIS_JWT_SECRET" > /tmp/secrets/jwt_secret
              fi
              
              # Generate transfer secret
              TRANSFER_SECRET=$(openssl rand -base64 32)
              echo "$TRANSFER_SECRET" > /tmp/secrets/transfer_secret
              
              # Generate machine auth API key
              API_KEY=$(openssl rand -base64 32)
              echo "$API_KEY" > /tmp/secrets/api_key
              
              echo "Secret generation completed."
          
          env:
            # All OCIS secrets from the main secret
            - name: OCIS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.jwtSecretKey }}
                  optional: true
            - name: OCIS_TRANSFER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.transferSecretKey }}
                  optional: true
            - name: OCIS_MACHINE_AUTH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.apiKeyKey }}
                  optional: true
          
          volumeMounts:
            - name: secret-files
              mountPath: /tmp/secrets
          
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
      
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          
          # OpenCloud doesn't have a dedicated health endpoint
          # Using the main web interface for health checks
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 120  # OpenCloud needs time to initialize all services
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 60   # Allow services to start before accepting traffic
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          env:
            # Core OCIS secrets - use generated or provided values
            - name: OCIS_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.jwtSecretKey }}
                  optional: true
            - name: OCIS_TRANSFER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.transferSecretKey }}
                  optional: true
            - name: OCIS_MACHINE_AUTH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.ocisSecrets.name }}
                  key: {{ .Values.opencloud.ocisSecrets.apiKeyKey }}
                  optional: true
            
            # Database credentials
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.external.passwordSecret.name }}
                  key: {{ .Values.database.external.passwordSecret.key }}
            
            # Admin credentials
            - name: IDM_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.opencloud.adminPasswordSecret.name }}
                  key: {{ .Values.opencloud.adminPasswordSecret.key }}
            
            # Additional user-defined environment variables
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          
          envFrom:
            - configMapRef:
                name: {{ include "opencloud.fullname" . }}-config
          
          volumeMounts:
            {{- if .Values.storage.data.enabled }}
            - name: data
              mountPath: {{ .Values.storage.data.mountPath }}
            {{- end }}
            {{- if .Values.storage.config.enabled }}
            - name: config
              mountPath: {{ .Values.storage.config.mountPath }}
            {{- end }}
            {{- if .Values.storage.cache.enabled }}
            - name: cache
              mountPath: {{ .Values.storage.cache.mountPath }}
            {{- end }}
            - name: secret-files
              mountPath: /tmp/secrets
              readOnly: true
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      
      volumes:
        {{- if .Values.storage.data.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.storage.data.claimName }}
        {{- end }}
        {{- if .Values.storage.config.enabled }}
        - name: config
          persistentVolumeClaim:
            claimName: {{ .Values.storage.config.claimName }}
        {{- end }}
        {{- if .Values.storage.cache.enabled }}
        - name: cache
          persistentVolumeClaim:
            claimName: {{ .Values.storage.cache.claimName }}
        {{- end }}
        - name: secret-files
          emptyDir: {}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}